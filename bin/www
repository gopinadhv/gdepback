#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');
const CONFIG = require('../config/config');
/**
 * Get port from environment and store in Express.
 */
const socketIo = require("socket.io");
// const axios = require("axios");

const port = normalizePort(CONFIG.port || '8008');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = socketIo(server);
exports.io = io;
/**
 * Listen on provided port, on all network interfaces.
 */
io.on("connection", socket => {
  console.log("New client connected")
  // , setInterval(
  //   () => getApiAndEmit(socket),
  //   10000
  // );
  // console.log(socket.id)
  // console.log(socket.handshake.query['foo'], 'Object.keys(io.sockets.connected).length', Object.keys(io));
  socket.on("disconnect", () => console.log("Client disconnected"));
});


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  console.log('Server listenning on port:', addr.port);

}
